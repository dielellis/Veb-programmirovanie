#Задание №1
import math

class Sphere:
    def __init__(self, r=1, x=0, y=0, z=0):
        self.radius = r
        self.x = x 
        self.y = y
        self.z = z 

    def get_volume(self): 
        vol = 4/3  * math.pi * (self.radius ** 3)
        return vol 

    def get_square_(self):
        square = 4 * math.pi * (self.radius ** 2)
        return square 

    def get_radius_(self):
        return self.radius 

    def get_center_(self):
        return (x, y, z) 
    
    def set_radius(self, r):
        self.radius = r

    def set_center(self, x, y, z):
        self.x = x 
        self.y = y
        self.z = z 

    def is_point_inside(self, x, y, z):
        dist = (self.x - x) ** 2 + (self.y - y) ** 2 + (self.z - z) ** 2
        if self.radius ** 2 >= dist:
            return True 
        else:
            return False 


x = float(input("Введите х: "))
y = float(input("Введите y: "))
z = float(input("Введите z: "))
r = float(input("Введите r: "))

sphere = Sphere(r, x, y, z)

print("Объем шара:", sphere.get_volume())
print("Площадь внешней поверхности шара:", sphere.get_square_())
print("Радиус шара:", sphere.get_radius_())
print("Центр шара:", sphere.get_center_())

x = float(input("Введите новый х: "))
y = float(input("Введите новый y: "))
z = float(input("Введите новый z: "))
r = float(input("Введите новый r: "))
sphere.set_center(x, y, z)
sphere.set_radius(r)

x = float(input("Введите координату х точки: "))
y = float(input("Введите координату y точки: "))
z = float(input("Введите координату z точки: "))
print("Находится ли точка внутри шара", sphere.is_point_inside(x, y, z))



#Задание №2
import numpy as np 

class Matrix:
    def __init__(self, size_=(3, 3)):
        self.arr = np.random.randint(1, 10, size=size_)
        print(self.arr)

    def __lt__(self, other): # less then
        det1 = np.linalg.det(self.arr) 
        # print("det1:", det1)
        det2 = np.linalg.det(other.arr) 
        # print("det2:", det2)
        if det1 < det2:
            return True 
        else:
            return False 

    def __gt__(self, other): # greater then 
        det1 = np.linalg.det(self.arr) 
        # print("det1:", det1)
        det2 = np.linalg.det(other.arr) 
        # print("det2:", det2)
        if det1 > det2:
            return True 
        else:
            return False 

    def __le__(self, other): # less equal
        det1 = np.linalg.det(self.arr) 
        # print("det1:", det1)
        det2 = np.linalg.det(other.arr) 
        # print("det2:", det2)
        if det1 <= det2:
            return True 
        else:
            return False 

    def __ge__(self, other): # great equal
        det1 = np.linalg.det(self.arr) 
        # print("det1:", det1)
        det2 = np.linalg.det(other.arr) 
        # print("det2:", det2)
        if det1 >= det2:
            return True 
        else:
            return False 

    def __eq__(self, other): # equal
        det1 = np.linalg.det(self.arr) 
        # print("det1:", det1)
        det2 = np.linalg.det(other.arr) 
        # print("det2:", det2)
        if det1 == det2:
            return True 
        else:
            return False 

    def __ne__(self, other): # not equal
        det1 = np.linalg.det(self.arr) 
        # print("det1:", det1)
        det2 = np.linalg.det(other.arr) 
        # print("det2:", det2)
        if det1 != det2:
            return True 
        else:
            return False 

    def sub(self, other):
        return self.arr + other.arr

    def mul(self, other):
        return self.arr.dot(other.arr)


m1 = Matrix()
m2 = Matrix()

if m1 < m2:
    print("m1 < m2")

if m1 <= m2:
    print("m1 <= m2")

if m1 > m2:
    print("m1 > m2")

if m1 >= m2:
    print("m1 >= m2")

if m1 == m2:
    print("m1 == m2")

if m1 != m2:
    print("m1 != m2")

print(m1.sub(m2))
print(m1.mul(m2))
